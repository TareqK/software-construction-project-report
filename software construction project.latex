\newtoks\course
\newtoks\assignment
\newtoks\professor
\newtoks\semester
\newtoks\duedate
\documentclass[14pt]{article}
\usepackage[margin=1in]{geometry}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{vhistory}
\usepackage{hyperref}

%______________________________________________________________________________%
\course{Software Engineering Management}
\assignment{Final Project}
\professor{Ahmed Tamrawi}
\semester{Fall 2019/2020}
\duedate{2019-11-2}
%______________________________________________________________________________%


%______________________________________________________________________________%
\title{\the\course\\\the\assignment}
\author{Tareq Kirresh(TK) : 1195221}
\begin{document}
\begin{figure}
\centering
  \includegraphics[width=7cm]{./images/birzeit-logo.png}
\end{figure}
\maketitle 
\begin{center} 
	Course Professor : Dr. \the\professor\\
    Semester : \the\semester\\
    Due Date : \the\duedate\\
\end{center}
\newpage
%______________________________________________________________________________%


%______________________________________________________________________________%
\tableofcontents 
\newpage 
%______________________________________________________________________________%


%______________________________________________________________________________%
%\begin{versionhistory}  %uncomment for version history
%\addcontentsline{toc}{section}{Version History}
% \vhEntry{1.0}{5.11.17}{TK|MJ|AB}{Created.} % example Version Histroy entry
%\end{versionhistory}
%\newpage 
%______________________________________________________________________________%


%______________________________________________________________________________%


\section{Part 1}
\subsection{Overview and Justification}
The Project chosen for this report is called JESSE, standing for "Java
Enterprise Server Sent Events", an implementation of the SSE web standard
for real time push events from a server to a subscribed client. I myself
started this project about a year ago, due to the lack of context injection
free framework for SSE, which was needed for database polling and handling 
events from an event queue. The author is currently using it in some 
projects for himself, and is working on a SAAS solution for real time
communication based on it.\\

This project was selected because it felt lacking in unit/integration tests,
code quality, and documentation. While no new functionality was added,
the code base was in bad shape and made the project difficult to use and 
understand. Additionally, the project had a lack of serialization types
which might have led to it not being as adopted as possible.
One additional projects was considered, such as the 
\href{https://github.com/openhab-scripters/openhab-helper-libraries}{openHab Scripters Project}, 
but was seen as too niche of a need to invest time into, and is not 
impactful beyond the project itself.\\

The JESSE project lives on \href{https://github.com/TareqK/Jesse}{this GitHub repository},
and is released under an Apache-2 License.\\
\newpage
\subsection{Building the Project}
The project is a simple maven build, so building it did not require any
special setups, simply a working maven installation. The author also 
has a private CI/CD server, on which a new regular build and test job 
was added. Aditionally, the build works on the Apache NetBeans IDE, since it also
includes maven out of the box
\begin{figure}[h]
\centering
  \includegraphics[width=0.6\paperwidth, height=0.25\paperheight]{./images/jenkins-build.png}
   \caption{Jenkins Build}
\end{figure}


\begin{figure}[h]
\centering
  \includegraphics[width=0.6\paperwidth, height=0.25\paperheight]{./images/netbeans-build.png}
   \caption{NetBeans Build}
\end{figure}
\newpage
\subsection{Tasks Description and Links}
Overall, 10 tasks were chosen to be done,including code cleanups, 
refactors, documentation, simplifaction, and testing.
The follwing is a list of the tasks :
\begin{itemize}
	\item\href{https://github.com/TareqK/Jesse/issues/17}{Upgrade Jackson Version}
	- the old Jackson serialization library used was found to have some security vulnrabilities
	and needed to be upgraded
	\item\href{https://github.com/TareqK/Jesse/issues/16}{Add Unit tests for base functionality}
	- there were no tests at all for the project, other than developer manual testing. Some test 
	functionality was needed.
	\item\href{https://github.com/TareqK/Jesse/issues/15}{Implement an XML Mapper}
	- there was a lack of serialization formats, as only JSON and Plain Test exist in the project
	currently. SSE sometimes is used to transport entire parts of pages to render them
	client-side, and to mesh with that use case, XML support was needed.
	\item\href{https://github.com/TareqK/Jesse/issues/12}{Add checkstyle to project}
	- Code style and JavaDoc enforcment was non-existent in the project and needed
	to be added to make it easier to do expand the project, and keep everything well
	documented.
	\item\href{https://github.com/TareqK/Jesse/issues/34}{Add Unit test for keepalive/ping} 
	- to test if session keepalive works
	\item\href{https://github.com/TareqK/Jesse/issues/30}{Add a sessionId to the SseSession} 
	- to make sessions easier to identify by the person using this library
	\item\href{https://github.com/TareqK/Jesse/issues/21}{Allow changing the interval of keepalive at runtime}
	- there was no way to change the keepalive interval after startup, which was needed to be adaptive to network
	conditions
	\item\href{https://github.com/TareqK/Jesse/issues/18}{Default Session Manager should be used when no other session manager is specified}
	- a session manager for the conencted session had to be specified manually in the configuration, and the default one was not called automatically. 
	this simplified configuration.

\end{itemize}
\subsection{Planning and Execution}
\subsubsection{Approach}
The author does not believe in estimation, and rather likes to rely on
metrics, so no initial estimation was not done. However, a cadence
was established,after solving a few varied issues and the following 
service complexity table was created to be used.
\subsubsection{Service Complexity Table}

\begin{center}
	\begin{tabular} {|c|c|c|c|}
	\hline
	Service/Compexity & Easy & Medium & Hard\\
	\hline\hline
	Serializer & 0.2 hours & --- & --- \\
	Test  & 0.2 hours & 0.5 hours & --- \\
	Deployment Configuration & 0.5 hours & --- & ---\\
	Session Management & 1.0 hours & --- & --- \\
	CI CD & --- & 0.5 hours & ---  \\
	Refactoring and Infrastructure & 1.0 hours & 2.0 hours & 8.0 hours\\
	\hline
	\end{tabular}
\end{center}
\newpage
\subsubsection{Task Complexity, Subtasks, and Service Types}
\begin{itemize}
\item Upgrade Jackson Version, Refactoring and Infrastructure, Easy
\item Add Unit tests for Base Functionality
	\begin{itemize}
		\item Create base test and utils, Refactoring and Infrastructure, Hard
		\item Add test for broadcast, Test, Medium
		\item Add test for JSON Serialization, Test, Easy
		\item Add JUnit Support in Jenkins Build, CI CD, Medium
	\end{itemize}
\item Implement an XML Mapper
	\begin{itemize}
		\item Implement and Add XML Mapper to mapper registery, Serializer, Easy
		\item Add Unit Test for XML Mapper, Test, Easy
	\end{itemize}
\item Add Checkstyle to Project
	\begin{itemize}
		\item Add Checkstyle to Maven Build and configure rules, CI CD, Medium
		\item Fix Style violations and errors, Refactoring and Infrastructure, Hard
	\end{itemize}
\item Add Unit test for keepalive/ping
	\begin{itemize}
		\item Add a way to capture events by type to test bench, Refactoring and Infrastructure, Medium
		\item Add Unit test for ping, Test, Medium
	\end{itemize}
\item Add a sessionId to the SseSession, Session Management, Easy
\item Allow changing the interval of keepalive at runtime
	\begin{itemize}
		\item clean up Servlet Class and startup parameter, Refacoting and Infrastructure, Easy
		\item Add a Setter method to the SessionKeepAlive class and reference from inside servlet, Session Management, Medium
	\end{itemize}
\item Default Session Manager should be used when no other session manager is specified, Deployment Configuration, Easy
\end{itemize}
\newpage
\subsubsection{Execution Plan}
The author is only avaiable for 2 days a week, so over the period of 3 weeks, a total 
of 6 days were allocated to this project, with a 7th day added in the second
week due to a national holidy. The following gantt chart shows the order
of execution for these issues
\begin{figure}[h]
\centering
  \includegraphics[width=0.8\paperwidth]{./images/execution-gantt.png}
   \caption{Execution Plan}
\end{figure}
\subsection{Risk Assesment}
The only real risk in any task was the potenital to cause memory leaks
due to the largely functional-style of programming used in this project. 
Java is an Object-Oriented language, and using it in such a functional 
matter, passing referenecs for an object to its inner classes then passing
those on to executors or callback handlers may cause memory leaks. However,
A debugging round was carried out with some stress and it was found that
all sessions were cleared from memory. As a safeguard, a test was added
(not related to an issue), that opened a large ammount of sessions and 
closed them, checking if the references to them were also removed correctly.
\newpage
\subsection{Initial Development Process Plan}
The process of development is largely based on the standard FOSS community
branching procedures, where each issue has its branch named after the issue,
the work is done on that branch, and then merged to a development branch. 
After a stable state was reached, a release is created and merged into the
master branch of the repository.
\begin{figure}[h]
\centering
  \includegraphics[width=0.8\paperwidth]{./images/pull-request.png}
   \caption{Development Process}
\end{figure}
\subsection{Tasks Scope Justification}
These tasks were chosen because they were varied in their nature and 
required the application of a lot of clean code and best practice knowledge.
While the core functionality was working previously, the code base was
in a bad state, and evolution was not possible, as
\begin{itemize}
	\item There was no documentation of the code
	\item There was no documentation of the useage
	\item The code followed unclear logical paths
	\item There was no testing
\end{itemize}

The tasks were chosen to mitigate this issue, and to transform the 
library into a more useable component for project's outside the 
author's own.

The tasks contained a heavy ammount of refactoring, and most of the 
tasks focused on increasing quality over features. 
\newpage
\section{Part 2}
\subsection{Project Context and Business Model}
This project came about when I was implemnting a real time tracking 
application at scale. The idea was that I needed to either poll the database
or receive events from an event queue, and I needed to push them to a client.
The problems with existing solutions where that they all relied on the 
event sink being in the same context as the request, meaning it was 
difficult to send events in a clean way without either manually taking 
the context and injecting it into any event queue handlers/ polling threads, 
or placing the event handlers/polling threads somewhere in the service
class. Neither of these were desirable, and I had previously worked on a
simplified application of this kind of real time communication in my 
bachelors graduation project, except using web sockets instead of Server
Sent Events. Therefore, I wanted to create an flexible library that allows
me to use Server Sent Events outside of a context, and at the same time,
I wanted it to mesh with the Java Enterprise style of coding, where
most things are injected at runtime.
\newpage
\subsection{Task Descriptions}

\begin{itemize}
\item Upgrade Jackson Version : This task only required me to change the pom.xml file to
use a more recent version of the library. the APIs and behaviours had not changed,
so there was no need to re-write any code
\item Add Unit tests for Base Functionality
	\begin{itemize}
		\item Create base test and utils: I needed to create a  base layer for testing that allowed me
		to act as a client and a server at the same time in order to send and catch requests. While this
		is not exactly a unit test, it is still run with JUnit, and so works fine for now.
		\item Add test for broadcast : After the creation of the base layer, I created the basic test that senta
		out a request with a certain ID and received it and checked that all its contents were sent and received correctly.
		Since the baselayer allowed me to do this, this turned out easier than expected
		\item Add test for JSON Serialization : I created a test that sent out an event with a certain ID and gave it an 
		object to serialize. I caught that event, and checked if the serialized object in JSON has the same values as the
		object I sent
		\item Add JUnit Support in Jenkins Build : For this, I had to install the JUnit plugin and enable it for the project,
		and i had to reference the name of the junit report file in order to build result trends
	\end{itemize}
\item Implement an XML Mapper
	\begin{itemize}
		\item Implement and Add XML Mapper to mapper registery : For this, I simply needed to implement the MapperFeature interface
		and specify that this mapper feature implements XML. I used Jackson as well for this mapper, which takes Java objects and 
		maps them into XML
		\item Add Unit Test for XML Mapper : A Unit test was added that sent an event with a certain ID and gave it an object to 
		serialize. I Caught that event, and checked if the serialized object in XML has the same values as the object i sent
	\end{itemize}
\item Add Checkstyle to Project
	\begin{itemize}
		\item Add Checkstyle to Maven Build and configure rules : This required a change in the pom.xml file to add the checkstyle plugin,
		and the addition of a checkstyle.xml file specifiying the rules that will be enforced. The setup of the plugin meant that the
		project will not compile if documentation is lacking in the source files or if there are style violations. This greatly
		increases code quality and consistency
		\item Fix Style violations and errors : Since the code was written around 10 months ago, it was written when I was less experienced
		in clean code and style. As such, the code came up with around 300 style violations(including documentation violations) that needed
		to be repaired. This was not a huge issue, as most of the style violations where centered around variable names, spacing, braces,
		and javadoc
	\end{itemize}
\item Add Unit test for keepalive/ping
	\begin{itemize}
		\item Add a way to capture events by type to test bench : The test bench, when i first designed it(before taking on this issue), only
		caught events by ID. This needed an upgrade, and I had to start catching events by name(or type). This was not a difficult enhancement,
		as the same code was simply reused while looking for different properties in the event.
		\item Add Unit test for ping : I used the methods I wrote above to check that a ping signal is sent regularly. Not much was done
		in terms of code
	\end{itemize}
\item Add a sessionId to the SseSession : I added a property to the SseSession class that specifies a unique ID, and used the session manager
to generate the session Id via UUID by default. This can be overwridden, In case a session manager wants to reflect the location/user account/other property
in the session Id
\item Allow changing the interval of keepalive at runtime
	\begin{itemize}
		\item clean up Servlet Class and startup parameter : The start up parameter scanning logic was too complex, and needed to be simplified
		to work correctly. This was done by assinging default values and removing rendundant If statements
		\item Add a Setter method to the SessionKeepAlive class and reference from inside servlet : The SessionKeepAlive class's schedueling mechanism
		was changed. Instead of relying on the thread pool to re-scheduele by itself, the thread itself called a method that reschedueled it,
		taking the new value of the keepalive as read from the session manager. Additionally, the interval can be changed from anywhere inside the application now
	\end{itemize}
\item Default Session Manager should be used when no other session manager is specified : The logic that is used to find the session manager class was simplified, and not
finding any class simply uses the default session manager.
\end{itemize}
\newpage
\subsection{Submitted Artifacts}
A list of the issues solved can be found \href{ https://github.com/TareqK/Jesse/issues?q=is\%3Aissue+is\%3Aclosed }{Here},
additionally, the library itself is on maven central \href{https://search.maven.org/artifact/me.kisoft/jesse/1.0/jar}{Here} 
\subsection{QA Strategy}
The main QA Strategies used where static code analysis via checkstyle and unit tests via JUnit. Any functionality added had to have
its unit tests added and succeed, and any code added had to comply with coding standards otherwise it would not compile in the first place.
While this might not seem a lot, there is no UI/Interaction, and as such, there is no need for any more testing. Additionally, after 
all the issues were implemented, a profiling run was done to make sure no memory leaks were incurred, and with that done, there was 
no need to do any further testing. Any issues that might arise will show up in production, but as far as software shipped, everything is
working as it should be.
\subsection{QA Evidence}
The source code for tests can be found \href{https://github.com/TareqK/Jesse/tree/develop/src/test/java/me/kisoft/jesse/test}{Here},
and the checkstyle.xml file used for rules can be found \href{Checkstyle file : https://github.com/TareqK/Jesse/blob/develop/checkstyle.xml }{Here},
additionally, the jenkins reports produced can give us percise results on what is failing and when and how
\begin{figure}[h]
\centering
  \includegraphics[width=0.8\paperwidth]{./images/test-trends.png}
   \caption{Unit testing Trends}
\end{figure}
\newpage
\begin{figure}[h]
\centering
  \includegraphics[width=0.8\paperwidth]{./images/failing-tests.png}
   \caption{Failed Test Reports}
\end{figure}
\newpage
\subsection{Plan Updates}
Fortunately, due to a deep understanding of the code(since I wrote it initially), experience in real time systems,
and general practice, the only changes to the plan were those concerning the unit tests. There was a problem at first
with unit tests failing due to race conditions, which only happened in the CI/CD environment and not on local builds.
After some tracing, it was found that the initial implementation used was causing these problems, as it was not 
using promises in a correct way, Event Sources were not being closed once the tests concerning them were done,
and a problem arose with flushing which was cleared by tuning the server parameters(this would not hapen in a prodution setup,
since the server will automatically flush a completed request in that case to clear threads). These issues took around 8 more man 
hours to solve, but where still reasonably within the limits of the original estimation.
%______________________________________________________________________________%


%______________________________________________________________________________%
%\newpage 
%\begin{thebibliography}{9} % uncomment for biblography
%\addcontentsline{toc}{section}{References}
%\bibitem{predictiveTaxi} % example biblography entry
%Satish Kumar Verma, Hoang Tam Vo,
%\textit{A Predictive Taxi Dispatching System for Improved User
%Satisfaction and Taxi Utilization, SAP Innovation Center, Singapore, 2015.}
%\end{thebibliography}
%______________________________________________________________________________%
\end{document}
